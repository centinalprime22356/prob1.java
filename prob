import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.Scanner;

// queue node used in BFS
class Node
{
    // (x, y) represents matrix cell coordinates
    // dist represent its minimum distance from the source
    int x, y, dist;
    
    // maintain a parent node for printing path
    Node parent;

    Node(int x, int y, int dist, Node parent) {
        this.x = x;
        this.y = y;
        this.dist = dist;
        this.parent = parent;
    }

    @Override
    public String toString() {
        return "{" + x + ", " + y + '}';
    }
};

class prob1
{
    // M x N matrix
    private static final int M = 5;
    private static final int N = 5;

    // Below arrays details all 4 possible movements from a cell
    private static final int row[] = { -1, 0, 0, 1 };
    private static final int col[] = { 0, -1, 1, 0 };

    // Function to check if it is possible to go to position (row, col)
    // from current position. The function returns false if (row, col)
    // is not a valid position or has value 0 or it is already visited
    private static boolean isValid(int mat[][], boolean visited[][],
                                   int row, int col)
    {
        return (row >= 0) && (row < M) && (col >= 0) && (col < N)
                && mat[row][col] == 1 && !visited[row][col];
    }

    // Find Shortest Possible Route in a matrix mat from source
    // cell (i, j) to destination cell (x, y)
    private static void BFS(int mat[][], int i, int j, int x, int y)
    {
        // construct a matrix to keep track of visited cells
        boolean[][] visited = new boolean[M][N];

        // create an empty queue
        Queue<Node> q = new ArrayDeque<>();

        // mark source cell as visited and enqueue the source node
        visited[i][j] = true;
        q.add(new Node(i, j, 0, null));

        // stores length of longest path from source to destination
        int min_dist = Integer.MAX_VALUE;
        Node node = null;
        // run till queue is not empty
        while (!q.isEmpty())
        {
            // pop front node from queue and process it
            node = q.poll();

            // (i, j) represents current cell and dist stores its
            // minimum distance from the source
            i = node.x;
            j = node.y;
            int dist = node.dist;

            // if destination is found, update min_dist and stop
            if (i == x && j == y)
            {
                min_dist = dist;
                break;
            }

            // check for all 4 possible movements from current cell
            // and enqueue each valid movement
            for (int k = 0; k < 4; k++)
            {
                // check if it is possible to go to position
                // (i + row[k], j + col[k]) from current position
                if (isValid(mat, visited, i + row[k], j + col[k]))
                {
                    // mark next cell as visited and enqueue it
                    visited[i + row[k]][j + col[k]] = true;
                    q.add(new Node(i + row[k], j + col[k], dist + 1, node));
                }
            }
        }

        if (min_dist != Integer.MAX_VALUE) {
            System.out.println("The shortest path from source to destination "
                    + "has length " + min_dist);
            printPath(node);
        }
        else {
            System.out.println("Destination can't be reached from source");
        }
    }

    private static void printPath(Node node) {
        if (node == null) {
            return;
        }
        printPath(node.parent);
        System.out.println(node);
    }

    // Shortest path in a Maze
    public static void main(String[] args)throws Exception
    {
    	 int totalRow = 0;
		 int linecount=0;  
    	 
         String s; 
	   FileReader fr= new FileReader("C:\\Users\\e5571491\\eclipse-workspace\\Testabc\\src\\Abhishek"); 
	   Scanner scanner = new Scanner(fr);
       BufferedReader br = new BufferedReader(fr);    //Creation of File Reader object
       
       while((s=br.readLine())!=null)    //Reading Content from the file line by line
       {
          linecount++;               //For each line increment linecount by one 
             
       }
       totalRow = linecount;
       System.out.println(totalRow);

	   char[][] myArray = new char[totalRow][totalRow];
	   int[][] myArray2 = new int[totalRow][totalRow];
	   for (int row = 0; scanner.hasNextLine() && row < totalRow; row++) {
	       myArray[row] = scanner.nextLine().toCharArray();
	   }

	   for (int i=0; i<totalRow; i++) {
		   for (int j=0; j<totalRow; j++) {
			   myArray2[i][j] = (myArray[i][j] == 'O')?0:1;
		   }
	   }

        // Find shortest path from source (0, 0) to destination (7, 5)
        BFS(myArray2, 4,2, 0, 2);
    }
}
